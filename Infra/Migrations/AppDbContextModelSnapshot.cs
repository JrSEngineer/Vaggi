// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vaggi.Infra.Context;

#nullable disable

namespace Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Base.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("AccountType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entities.Credential.AccountCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("AccountCredential");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InterviewLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyField")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InterviewLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyId1");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.VacancyApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CandidateId1");

                    b.HasIndex("VacancyId1");

                    b.HasIndex("VacancyId", "CandidateId")
                        .IsUnique();

                    b.ToTable("Application");
                });

            modelBuilder.Entity("Domain.Entities.User.Candidate.Candidate", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.BaseEntity");

                    b.Property<string>("ProfileType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Candidate");
                });

            modelBuilder.Entity("Domain.Entities.User.Company.Company", b =>
                {
                    b.HasBaseType("Domain.Entities.Base.BaseEntity");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("Domain.Entities.Credential.AccountCredential", b =>
                {
                    b.HasOne("Domain.Entities.Base.BaseEntity", null)
                        .WithOne("Credential")
                        .HasForeignKey("Domain.Entities.Credential.AccountCredential", "AccountId");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Interview", b =>
                {
                    b.HasOne("Domain.Entities.Jobs.VacancyApplication", null)
                        .WithMany("Interviews")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Message", b =>
                {
                    b.HasOne("Domain.Entities.Jobs.VacancyApplication", null)
                        .WithMany("Messages")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Vacancy", b =>
                {
                    b.HasOne("Domain.Entities.User.Candidate.Candidate", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("CandidateId");

                    b.HasOne("Domain.Entities.User.Company.Company", null)
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.Company.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.VacancyApplication", b =>
                {
                    b.HasOne("Domain.Entities.User.Candidate.Candidate", null)
                        .WithMany("Applications")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User.Candidate.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jobs.Vacancy", null)
                        .WithMany("Applications")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Jobs.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Domain.Entities.Base.BaseEntity", b =>
                {
                    b.Navigation("Credential")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Jobs.Vacancy", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("Domain.Entities.Jobs.VacancyApplication", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.User.Candidate.Candidate", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Domain.Entities.User.Company.Company", b =>
                {
                    b.Navigation("Vacancies");
                });
#pragma warning restore 612, 618
        }
    }
}
